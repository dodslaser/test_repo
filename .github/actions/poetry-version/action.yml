name: Poetry Version
description: Get/Set Poetry Version
inputs:
  version:
    description: The version to set
    required: false
outputs:
  version:
    description: The version in pyproject.toml
    value: ${{ steps.version.outputs.version }}
runs:
  using: "composite"
  steps:

  # Restore the pyproject.toml cache if the version has been set previously
  - id: cache-pyproject-toml
    uses: actions/cache/restore@v4
    if: inputs.version != null
    with:
      lookup-only: true
      path: pyproject.toml
      key: ${{ hashFiles('pyproject.toml') }}_${{ inputs.version }}

  # Restore the version form cache
  - id: cache_version
    uses: actions/cache/restore@v4
    if: inputs.version == null
    with:
      key: ${{ hashFiles('pyproject.toml') }}_OUTPUT
      path: ${{ hashFiles('pyproject.toml') }}_OUTPUT


  - id: version
    run: |
      if [[ '${{ steps.cache-pyproject-toml.outputs.cache-hit }}' == 'true' ]]; then
        _output="version='${{ inputs.version }}'"
      elif [[ '${{ steps.cache_version.outputs.cache-hit }}' == 'true' ]]; then
        _output="$(cat '${{ steps.cache_version.outputs.cache-primary-key }}')"
      else:
        pipx install poetry
        _output="version=$(poetry version -s -- '${{ inputs.version }}')"
      fi
      echo "$_output" | tee "${{ hashFiles('pyproject.toml') }}_OUTPUT" >> "$GITHUB_OUTPUT"

    shell: bash

  - uses: actions/cache/save@v4
    with:
      key: ${{ hashFiles('pyproject.toml') }}_OUTPUT
      path: ${{ hashFiles('pyproject.toml') }}_OUTPUT
  - uses: actions/cache/save@v4
    if: inputs.version != null
    with:
      key: ${{ hashFiles('pyproject.toml') }}_${{ inputs.version }}
      path: pyproject.toml
  - run: rm -f ${{ env.cache-key }}_OUTPUT
    shell: bash