on:
  workflow_call:
    inputs:
      vers

jobs:
  read-file:
    runs-on: ubuntu-latest
    outputs:
      json: ${{ steps.read-file.outputs.json }}
    steps:
      - uses: actions/checkout@v4
      - id: read-file
        run: echo json=$(cat test.json) >> "$GITHUB_OUTPUT"

  test-matrix:
    needs: read-file
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ['0.0.1', '0.0.2']
        json: ${{ fromJson(needs.read-file.outputs.json) }}
    env:
      path: '${{ matrix.json.name }}-${{ matrix.version }}-1.33.7.json'
      jq_script: >
        .versions |=.+ [
          {
            tag: "0.42.0",
            "cellophane": ["${{ matrix.version }}"]
          }
        ]

    steps:
      - run: jq '${{ env.jq_script }}' <<< '${{ toJson(matrix.json) }}' > "${{ env.path }}"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.path }}
          path: ${{ env.path }}

  output:
    needs: test-matrix
    runs-on: ubuntu-latest
    env:
      jq_script: >
        group_by(.name) | map(
          first.versions = (
            [.[].versions] | (
              add | unique | group_by(.tag) | map(
                first.cellophane = (
                    [.[].cellophane]
                    | add
                    | unique
                ) | first
              )
            )
          ) | first
        )
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: versions
          merge-multiple: true
      - run: cat versions/*.json
      - run: jq -s '${{ env.jq_script }}' versions/*.json

# jq -s '. | group_by(.name) | map(.[0].versions[0].[] = [.[].versions[].[] | add] | .[0])'
# jq -s '. | group_by(.name) | map(group_by(.versions.[].tag))'

# jq -s 'group_by([.versions[].tag, .name]) | map(.[0].versions[0].cellophane = [ .[].versions[].cellophane | add] | .[0])'
# group_by(.name) | map(.[0].versions = ([.[].versions] | (add | unique | group_by(.tag) | map(first.cellophane = ([.[].cellophane] | add | unique) | first) )) | first)ï£¿